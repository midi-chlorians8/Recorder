services:
  portal:
    build:
      context: ./
      dockerfile: services/romalab/recorder/Dockerfile
    command: >
      ./services/uvicorn-run.sh romalab.recorder.main:app
        --port=${RECORDER_PORT}
        --host=0.0.0.0
        --reload
        --log-level=info
    hostname: ${RECORDER_HOST}
    container_name:  recorder
    ports:
      - "${RECORDER_PORT}:${RECORDER_PORT}"
    volumes:
      - source: services/
        target: /services
        type: bind
        read_only: true
    env_file:
      - ./.env
      #- ./.env.override
    environment:
      - RECORDER_VERSION
    #network_mode: host
    extra_hosts:
        - "${RECORDER_DB_HOST}:127.0.0.1"
    # logging:
    #   options:
    #     max-size: "2m"
    #     max-file: "3"
    # depends_on:
    #   db:
    #     condition: service_healthy
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "4"
    # profiles:
    #   - backend

  # db:
  #   image: postgres:14.9-alpine
  #   container_name: db
  #   hostname: db
  #   ports:
  #     - "${RECORDER_DB_PORT}:${RECORDER_DB_PORT}"
  #   environment:
  #     POSTGRES_DB: ${RECORDER_DB_NAME}
  #     POSTGRES_USER: ${RECORDER_DB_USER}
  #     POSTGRES_PASSWORD: ${RECORDER_DB_PASSWORD}
  #     # Used by init.sh script
  #     RECORDER_DB_USER: ${RECORDER_DB_USER}
  #     RECORDER_DB_HOST: ${RECORDER_DB_HOST}
  #     RECORDER_DB_PORT: ${RECORDER_DB_PORT}
  #   volumes:
  #   #  - ./infrastructure/local/postgres/init.sh:/docker-entrypoint-initdb.d/init.sh
  #     - db:/var/lib/postgresql/data
  #   command: -p ${RECORDER_DB_PORT}
  #   # healthcheck:
  #   #   test: [
  #   #     "CMD-SHELL",
  #   #     "pg_isready -p ${RECORDER_DB_PORT} -U ${RECORDER_DB_USER} -d ${RECORDER_AIRFLOW_DB_NAME}"
  #   #   ]
  #   #   interval: 3s
  #   #   timeout: 5s
  #   #   retries: 5

volumes:
  db:

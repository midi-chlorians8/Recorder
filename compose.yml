services:
  recorder:
    build:
      context: ./
      dockerfile: services/romalab/recorder/Dockerfile
    command: >
      ./services/uvicorn-run.sh romalab.recorder.main:app
        --port=${RECORDER_PORT}
        --host=0.0.0.0
        --reload
        --log-level=info
    hostname: ${RECORDER_HOST}
    container_name:  recorder
    ports:
      - "${RECORDER_PORT}:${RECORDER_PORT}"
    volumes:
      - source: services/
        target: /services
        type: bind
        read_only: true
    env_file:
      - ./.env
      #- ./.env.override
    environment:
      - RECORDER_VERSION
    #network_mode: host

    # logging:
    #   options:
    #     max-size: "2m"
    #     max-file: "3"
    # depends_on:
    #   db:
    #     condition: service_healthy
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "4"
    # profiles:
    #   - backend

  db:
    image: postgres:14.15-alpine
    container_name: db
    hostname: db
    ports:
      - "${RECORDER_DB_PORT}:${RECORDER_DB_PORT}"
    environment:
      POSTGRES_DB: ${RECORDER_DB_NAME}
      POSTGRES_USER: ${RECORDER_DB_USER}
      POSTGRES_PASSWORD: ${RECORDER_DB_PASSWORD}
      # Used by init.sh script
      RECORDER_DB_USER: ${RECORDER_DB_USER}
      RECORDER_DB_HOST: ${RECORDER_DB_HOST}
      RECORDER_DB_PORT: ${RECORDER_DB_PORT}
    volumes:
    #  - ./infrastructure/local/postgres/init.sh:/docker-entrypoint-initdb.d/init.sh
      - db:/var/lib/postgresql/data
    #command: -p ${RECORDER_DB_PORT}
    # healthcheck:
    #   test: [
    #     "CMD-SHELL",
    #     "pg_isready -p ${RECORDER_DB_PORT} -U ${RECORDER_DB_USER} -d ${RECORDER_AIRFLOW_DB_NAME}"
    #   ]
    #   interval: 3s
    #   timeout: 5s
    #   retries: 5
  nginx:
    image: nginx:latest
    container_name: nginx
    depends_on:
      - recorder
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME} # Из .env файла
    volumes:
      - ./infrastructure/nginx/conf.d/default.conf.template:/etc/nginx/conf.d/default.conf.template:ro
      - nginx_certs:/etc/letsencrypt
      - nginx_certs:/var/www/html
    command: /bin/sh -c "envsubst < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
  
  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    depends_on:
      - nginx
    volumes:
      - nginx_certs:/etc/letsencrypt
      - nginx_certs:/var/www/html
    command: >
      certonly --webroot
      --webroot-path=/var/www/html
      -d example.com
      --email your-email@example.com
      --agree-tos
      --no-eff-email
    # Запускайте вручную (например, docker-compose run certbot) когда нужно обновить сертификат,
    # либо настройте крон для автоматизации.

volumes:
  db:
  nginx_certs: